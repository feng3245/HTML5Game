Points of hard code
--Core--
this.players = {
                self : new game_player(this,this.instance.player_host),
                other : new game_player(this,this.instance.player_client)
            };

this.players = {
                self : new game_player(this),
                other : new game_player(this)
            };

this.ghosts = {
                    //Our ghost position on the server
                server_pos_self : new game_player(this),
                    //The other players server position as we receive it
                server_pos_other : new game_player(this),
                    //The other players ghost destination position (the lerp)
                pos_other : new game_player(this)
            };
            this.ghosts.pos_other.state = 'dest_pos';

            this.ghosts.pos_other.info_color = 'rgba(255,255,255,0.1)';

            this.ghosts.server_pos_self.info_color = 'rgba(255,255,255,0.2)';
            this.ghosts.server_pos_other.info_color = 'rgba(255,255,255,0.2)';

            this.ghosts.server_pos_self.state = 'server_pos';
            this.ghosts.server_pos_other.state = 'server_pos';

            this.ghosts.server_pos_self.pos = { x:20, y:20 };
            this.ghosts.pos_other.pos = { x:500, y:200 };
            this.ghosts.server_pos_other.pos = { x:500, y:200 };

(other should be plural interface)


//change for id look up maybe?
 this.players.self.host ?  this.players.self : this.players.other;
this.players.self.host ?  this.players.other : this.players.self;

method: server_update_physics

    //Handle player two
    this.players.other.old_state.pos = this.pos( this.players.other.pos );
    var other_new_dir = this.process_input(this.players.other);
    this.players.other.pos = this.v_add( this.players.other.old_state.pos, other_new_dir);

this.check_collision( this.players.other );
this.players.other.inputs = [];
(change this for plural interface)

method: server_update

cp  : this.players.other.pos,

cis : this.players.other.last_input_seq,

if(this.players.other.instance) {
        this.players.other.instance.emit( 'onserverupdate', this.laststate );
    }(send snapshot to all other players)

method: handle_server_input

player_client =
        (client.userid == this.players.self.instance.userid) ?
            this.players.self : this.players.other;
(should be adjusted for multiple clients)


method: client_process_net_prediction_correction

this.players.self.host ? latest_server_data.hp : latest_server_data.cp; (cp should be determined for multiple other players)

this.ghosts.server_pos_self.pos = this.pos(my_server_pos); (server_pos_self.pos should be for multiple)

var my_last_input_on_server = this.players.self.host ? latest_server_data.his : latest_server_data.cis; (should be determined for multiple other players)

method: client_process_net_updates

var other_server_pos = this.players.self.host ? latest_server_data.cp : latest_server_data.hp;

            //The other players positions in this timeline, behind us and in front of us
        var other_target_pos = this.players.self.host ? target.cp : target.hp;
        var other_past_pos = this.players.self.host ? previous.cp : previous.hp;

            //update the dest block, this is a simple lerp
            //to the target from the previous point in the server_updates buffer
        this.ghosts.server_pos_other.pos = this.pos(other_server_pos);
        this.ghosts.pos_other.pos = this.v_lerp(other_past_pos, other_target_pos, time_point);

        if(this.client_smoothing) {
            this.players.other.pos = this.v_lerp( this.players.other.pos, this.ghosts.pos_other.pos, this._pdt*this.client_smooth);
        } else {
            this.players.other.pos = this.pos(this.ghosts.pos_other.pos);
        }

    //These are the exact server positions from this tick, but only for the ghost
            var my_server_pos = this.players.self.host ? latest_server_data.hp : latest_server_data.cp;

                //The other players positions in this timeline, behind us and in front of us
            var my_target_pos = this.players.self.host ? target.hp : target.cp;
            var my_past_pos = this.players.self.host ? previous.hp : previous.cp;


method: client_onserverupdate_recieved

Same stuff (abstraction or refactoring strongly needed)

method: client_update_local_position

ditto

method: client_update_physics

''
method: client_update

''

method: client_create_debug_gui (priority low)

''

method: client_reset_positions

player_client

this.players.other.pos
this.ghosts.server_pos_other.pos
this.ghosts.pos_other.pos
this.players.other.pos

method: client_onreadygame

player_host
player_client

player_host.info_color
player_client.info_color

player_host.state
player_client.state

this.players.self.state

method: client_onjoingame (where is this called)

method: client_onconnected (where is this called)

method: client_on_otherclientcolorchange

this.players.other.color

method: client_onnetmessage (Where game methods are called)

method: client_ondisconnect

this.players.other
--End of core--

--server--
Method: onMessage(client,message) (Where is client coming from? //Ans: client is an abstraction for the actual client interface between browser and server)

Method: _onMessage

var other_client =
            (client.game.player_host.userid == client.userid) ?
                client.game.player_client : client.game.player_host; (this should be multiple)
if(other_client)
                other_client.send('s.c.' + message_parts[1]); (lets find this actual other client)

method: createGame

if(thegame.player_client) {
                            //tell them the game is over
                        thegame.player_client.send('s.e');
                            //now look for/create a new game.
                        this.findGame(thegame.player_client);
                    }
(tell all clients now)
method: startGame

game.player_client (this should be a plural interface)

method: findGame

game_instance.player_count < 2 (lets remove this limit)

game_instance.player_client

game_instance.gamecore.players.other.instance (change these to plural interfaces)



--End of server--